app: e-signatures
org: maplighttech
service: backend-auth

frameworkVersion: '3'

custom:
  esbuild:
    minify: true
    watch:
      pattern: ["lambda/**/*.ts"]
      ignore: ["./serverles/**/*", ".build"]

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, "dev"}

functions:
  assignGroup:
    handler: lambda/group-assign/index.handler
    role: UserGroupMembershipLambdaRole
    events:
      - cognitoUserPool:
          pool: AppUserPool
          trigger: PostConfirmation

  adminActions:
    handler: lambda/admin/index.handler
    role: AdminActionsLambdaRole

plugins:
  - serverless-esbuild

resources:
  - ${file(./resources/user-pool.yml)}
  - ${file(./resources/user-pool-client.yml)}
  - ${file(./resources/user-groups.yml)}
  - ${file(./resources/user-pool-default-user.yml)}
  - ${file(./resources/lambda-role-group-assign.yml)}
  - ${file(./resources/lambda-role-admin-action.yml)}

  - Outputs:
      userPoolId: { Value: { Ref: CognitoUserPoolAppUserPool } }
      userPoolClientId: { Value: { Ref: UserPoolWebClient } }
      userPoolProviderName: { Value: { Fn::GetAtt: [CognitoUserPoolAppUserPool, ProviderName] } }

outputs:
  UserPoolId: { Ref: CognitoUserPoolAppUserPool }
  UserPoolClientId: { Ref: UserPoolWebClient }
  UserPoolProviderName: { Fn::GetAtt: [CognitoUserPoolAppUserPool, ProviderName] }

  PetitionerGroup: { Ref: PetitionerUserGroup }
  CityStaffGroup: { Ref: CityStaffUserGroup }
  AdminGroup: { Ref: AdminUserGroup }
