app: e-signatures
org: maplighttech
service: backend-auth

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, "dev"}

functions:
  hello:
    handler: lambda/hello/index

plugins:
  - serverless-esbuild

resources:
  Resources:
    
    # The user pool used to provide authenticated
    # users
    UserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        UserPoolName: ${self:provider.stage}-UserPool
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: "verified_email"
              Priority: 1
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: false
        AutoVerifiedAttributes:
          - "email"
        Schema:
          - Name: "address"
            AttributeDataType: "String"
            Mutable: true
            Required: true
          - Name: "name"
            AttributeDataType: "String"
            Mutable: true
            Required: true
          - Name: "email"
            AttributeDataType: "String"
            Mutable: true
            Required: true
          - Name: "access_group"
            AttributeDataType: "String"
            Mutable: true
            Required: false
        AliasAttributes:
          - "email"

    # The client identity used by the webapp
    # to interact with Cognito
    UserPoolWebClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:provider.stage}-UserPoolClient
        UserPoolId: { Ref: UserPool }
        PreventUserExistenceErrors: ENABLED
        GenerateSecret: false
        SupportedIdentityProviders:
          - "COGNITO"
        ExplicitAuthFlows:
          - "ALLOW_ADMIN_USER_PASSWORD_AUTH"
          - "ALLOW_USER_SRP_AUTH"
          - "ALLOW_USER_PASSWORD_AUTH"
          - "ALLOW_REFRESH_TOKEN_AUTH"
        WriteAttributes:
          - "address"
          - "name"
          - "email"

    # User groups.
    # These define the access level a user has when interacting with the API
    # From least to most priviledged group/role:
    # Petitioner -> City Staff -> Admin

    PetitionerUserGroup:
      Type: "AWS::Cognito::UserPoolGroup"
      Properties:
        GroupName: ${self:provider.stage}-PetitionerGroup
        Description: "Users that can issue petitions to the city"
        Precedence: 2
        UserPoolId: { Ref: UserPool }

    CityStaffUserGroup:
      Type: "AWS::Cognito::UserPoolGroup"
      Properties:
        GroupName: ${self:provider.stage}-CityStaffGroup
        Description: "Users that can review and approve or reject petitions"
        Precedence: 1
        UserPoolId: { Ref: UserPool }

    AdminUserGroup:
      Type: "AWS::Cognito::UserPoolGroup"
      Properties:
        GroupName: ${self:provider.stage}-AdminGroup
        Description: "Admin users. Have a superset of City Staff access rights"
        Precedence: 0
        UserPoolId: { Ref: UserPool }

    # The identity pool that will be used to link roles to
    # entities. Particularly for allowing unauthenticated access
    # to parts of the API. 
    UserIdentityPool:
      Type: "AWS::Cognito::IdentityPool"
      Properties:
        IdentityPoolName: ${self:provider.stage}-IdentityPool
        AllowUnauthenticatedIdentities: true
        CognitoIdentityProviders:
          - ClientId:
              Ref: UserPoolWebClient
            ProviderName:
              Fn::GetAtt:
                [UserPool, ProviderName]
            ServerSideTokenCheck: true

outputs:
  UserPoolId: { Ref: UserPool }
  UserPoolClientId: { Ref: UserPoolWebClient }
  UserIdentityPoolId: { Ref: UserIdentityPool }
  PetitionerGroup: { Ref: PetitionerUserGroup }
  CityStaffGroup: { Ref: CityStaffUserGroup }
  AdminGroup: { Ref: AdminUserGroup }
