app: e-signatures
org: maplighttech
service: backend-auth

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, "dev"}

functions:
  assignGroup:
    handler: lambda/group-assign/index
    role: UserGroupMembershipLambdaRole
    environment:
      PETITIONER_GROUP: { Ref: PetitionerUserGroup }
      CITY_STAFF_GROUP: { Ref: CityStaffUserGroup }
      ADMIN_GROUP: { Ref: AdminUserGroup }

  validateGroup:
    handler: lambda/group-validate/index

plugins:
  - serverless-esbuild

resources:
  Resources:
    
    # The user pool used to provide authenticated
    # users
    UserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        UserPoolName: ${self:provider.stage}-UserPool
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: "verified_email"
              Priority: 1
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: false
        AutoVerifiedAttributes:
          - "email"

        # event trigger configuration
        LambdaConfig:
          PreSignUp: { Fn::GetAtt: ["validateGroup", "Arn"] }
          PostConfirmation: { Fn::GetAtt: ["assignGroup", "Arn"] }

        Schema:
          - Name: "address"
            AttributeDataType: "String"
            Mutable: true
            Required: true
          - Name: "given_name"
            AttributeDataType: "String"
            Mutable: true
            Required: true
          - Name: "family_name"
            AttributeDataType: "String"
            Mutable: true
            Required: true
          - Name: "email"
            AttributeDataType: "String"
            Mutable: true
            Required: true
          - Name: "access_group"
            AttributeDataType: "String"
            Mutable: true
            Required: false
        AliasAttributes:
          - "email"

    # The client identity used by the webapp
    # to interact with Cognito
    UserPoolWebClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:provider.stage}-UserPoolClient
        UserPoolId: { Ref: UserPool }
        PreventUserExistenceErrors: ENABLED
        GenerateSecret: false
        SupportedIdentityProviders:
          - "COGNITO"
        ExplicitAuthFlows:
          - "ALLOW_ADMIN_USER_PASSWORD_AUTH"
          - "ALLOW_USER_SRP_AUTH"
          - "ALLOW_USER_PASSWORD_AUTH"
          - "ALLOW_REFRESH_TOKEN_AUTH"
        WriteAttributes:
          - "address"
          - "given_name"
          - "family_name"
          - "email"

    # User groups.
    # These define the access level a user has when interacting with the API
    # From least to most priviledged group/role:
    # Petitioner -> City Staff -> Admin

    PetitionerUserGroup:
      Type: "AWS::Cognito::UserPoolGroup"
      Properties:
        GroupName: ${self:provider.stage}-PetitionerGroup
        Description: "Users that can issue petitions to the city"
        Precedence: 2
        UserPoolId: { Ref: UserPool }

    CityStaffUserGroup:
      Type: "AWS::Cognito::UserPoolGroup"
      Properties:
        GroupName: ${self:provider.stage}-CityStaffGroup
        Description: "Users that can review and approve or reject petitions"
        Precedence: 1
        UserPoolId: { Ref: UserPool }

    AdminUserGroup:
      Type: "AWS::Cognito::UserPoolGroup"
      Properties:
        GroupName: ${self:provider.stage}-AdminGroup
        Description: "Admin users. Have a superset of City Staff access rights"
        Precedence: 0
        UserPoolId: { Ref: UserPool }

    # Default admin user that is to be created on site deployment.
    # Should be granted the highest access level and allow creating other
    # admin users after login, since admin/staff users should only be
    # able to be created through invitation
    RootUser:
      Type: "AWS::Cognito::UserPoolUser"
      Properties:
        DesiredDeliveryMediums:
          - "EMAIL"
        UserAttributes:
          - Name: "email"
            Value: ${param:rootEmail}
          - Name: "given_name"
            Value: "Admin"
          - Name: "family_name"
            Value: "MapLight"
          - Name: "address"
            Value: "{}"
          - Name: "custom:access_group"
            Value: "admin"
          - Name: "email_verified"
            Value: "true"
        UserPoolId: { Ref: UserPool }

    # Attach the root user to the admin group by default.
    # We can likely rely on the post-sign up lambda for this once
    # that's implemented, but let's do it explicitly for now
    RootUserGroupMembership:
      Type: "AWS::Cognito::UserPoolUserToGroupAttachment"
      Properties:
        GroupName: { Ref: AdminUserGroup }
        UserPoolId: { Ref: UserPool }
        Username: { Ref: RootUser }

    # The identity pool that will be used to link roles to
    # entities. Particularly for allowing unauthenticated access
    # to parts of the API. 
    UserIdentityPool:
      Type: "AWS::Cognito::IdentityPool"
      Properties:
        IdentityPoolName: ${self:provider.stage}-IdentityPool
        AllowUnauthenticatedIdentities: true
        CognitoIdentityProviders:
          - ClientId:
              Ref: UserPoolWebClient
            ProviderName:
              Fn::GetAtt:
                [UserPool, ProviderName]
            ServerSideTokenCheck: true

    # The role to be assumed by the lambda function that is to
    # automatically assign users to user groups after the user is
    # confirmed
    UserGroupMembershipLambdaRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: ${self:provider.stage}-UserGroupLambdaRole

        # allow lambdas to assume this role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole

        # actual permissions
        Policies:
          - PolicyName: ${self:provider.stage}-UserGroupLambdaPolicy
            PolicyDocument: 
              Version: "2012-10-17"
              Statement:
                # give access to logging features,
                # similar to the default role Serverless
                # creates for all lambdas
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - { Fn::Join: [":", ["arn:aws:logs", { Ref: "AWS::Region" }, { Ref: "AWS::AccountId" }, "log-group:/aws/lambda/*:*:*"]] }

                # give access to Cognito resources
                - Effect: Allow
                  Action:
                    - cognito-idp:DescribeUserPool
                    - cognito-idp:AdminAddUserToGroup
                    - cognito-idp:AdminListGroupsForUser
                    - cognito-idp:GetGroup
                    - cognito-idp:Getuser
                    - cognito-idp:ListGroups
                  Resource: 
                    - { Fn::GetAtt: [UserPool, Arn] }
                    - { Fn::Join: ["/", [{ Fn::GetAtt: [UserPool, Arn] }, "*"]] }

outputs:
  UserPoolId: { Ref: UserPool }
  UserPoolClientId: { Ref: UserPoolWebClient }
  UserIdentityPoolId: { Ref: UserIdentityPool }
  PetitionerGroup: { Ref: PetitionerUserGroup }
  CityStaffGroup: { Ref: CityStaffUserGroup }
  AdminGroup: { Ref: AdminUserGroup }
