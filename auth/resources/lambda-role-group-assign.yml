Resources:
  # The role to be assumed by the lambda function that is to
  # automatically assign users to user groups after the user is
  # confirmed
  UserGroupMembershipLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: ${self:provider.stage}-UserGroupLambdaRole

      # allow lambdas to assume this role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole

      # actual permissions
      Policies:
        - PolicyName: ${self:provider.stage}-UserGroupLambdaPolicy
          PolicyDocument: 
            Version: "2012-10-17"
            Statement:
              # give access to logging features,
              # similar to the default role Serverless
              # creates for all lambdas
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - { Fn::Join: [":", ["arn:aws:logs", { Ref: "AWS::Region" }, { Ref: "AWS::AccountId" }, "log-group:/aws/lambda/*:*:*"]] }

              # give access to Cognito resources
              - Effect: Allow
                Action:
                  - cognito-idp:AdminAddUserToGroup
                  - cognito-idp:AdminUpdateUserAttributes
                  - cognito-idp:ListGroups
                Resource: 
                  - { Fn::Join: [":", ["arn:aws:cognito-idp", { Ref: "AWS::Region" }, { Ref: "AWS::AccountId" }, "userpool/*"]] }
