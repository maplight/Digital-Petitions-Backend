#set($query = $context.arguments.query)

#set($expression = "#owner = :owner")
#set($expressionNames = { "#owner": "owner", "#status": "status" })
#set($expressionValues = { ":owner": $query.owner })

#set($status = $util.defaultIfNull(${query.status}, "ACTIVE"))
#set($limit = $util.defaultIfNull(${query.limit}, ${defaultPageSize}))

#if ($limit < ${defaultPageSize})
    #set($limit = ${defaultPageSize})
#end

## check for access control:
## staff and admins can look at all items from every petitioner
## petitioners can only look at their own items or the public items of other petitioners

#set($publicAccess = ["ACTIVE", "QUALIFIED", "NOT_QUALIFIED"])

## owner has access to everything
#set($isAuthorized = $context.identity.sub == $query.owner)
#set($isPublic = !$isAuthorized)

## public data is visible to everyone
#set($isAuthorized = $isAuthorized || $publicAccess.contains($status))

## finally, check for administrative access
#if (!$isAuthorized)
    #foreach ($group in $context.identity.claims.get("cognito:groups"))
        #if ($group == "CityStaffGroup" || $group == "AdminGroup")
            #set($isAuthorized = true)
            #set($isPublic = false)
        #end
    #end
#end

## if we've come this far and isAuthorized is still false
## then we must deny access

#if (!$isAuthorized)
    $util.unauthorized()
#end

#if ($status == "INACTIVE")
    #set($expression = "${expression} AND #status BETWEEN :lo AND :hi")

    #if ($isPublic)
        $util.quiet($expressionValues.put(":lo", "${STATUS_INACTIVE_PUBLIC_LOWER_BOUND}"))
    #else
        $util.quiet($expressionValues.put(":lo", "${STATUS_INACTIVE_LOWER_BOUND}"))
    #end

    $util.quiet($expressionValues.put(":hi", "${STATUS_INACTIVE_UPPER_BOUND}"))
#else
    #set($expression = "${expression} AND #status = :status")

    #set($statusMap = {
        "NEW": "${STATUS_NEW}",
        "CANCELED": "${STATUS_CANCELED}",
        "WITHDRAWN": "${STATUS_WITHDRAWN}",
        "REJECTED": "${STATUS_REJECTED}",
        "ACTIVE": "${STATUS_ACTIVE}",
        "NOT_QUALIFIED": "${STATUS_NOT_QUALIFIED}",
        "QUALIFIED": "${STATUS_QUALIFIED}"
    })

    $util.quiet($expressionValues.put(":status", "${statusMap[$status]}"))
#end

{
    "version": "2018-05-29",
    "operation": "Query",
    "index": "byOwnerIndexV2",
    "limit": $limit,
    "scanIndexForward": true,
    "query": {
        "expression": "$expression",
        "expressionNames": $util.toJson($expressionNames),
        "expressionValues": $util.dynamodb.toMapValuesJson($expressionValues)
    }
#if ($query.cursor)
    ,"nextToken": "${query.cursor}"
#end
}