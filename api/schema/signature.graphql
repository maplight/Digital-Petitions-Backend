type SignatureSummary @aws_iam @aws_cognito_user_pools {
    required: Int
    verified: Int

    approved: Int 
    @aws_cognito_user_pools(cognito_groups: ["AdminGroup", "CityStaffGroup", "GuestStaffGroup"])
    
    rejected: Int 
    @aws_cognito_user_pools(cognito_groups: ["AdminGroup", "CityStaffGroup", "GuestStaffGroup"])

    deadline: AWSDateTime

    submitted: Int
}

enum SignatureStatus {
    SUBMITTED
    VERIFIED
    APPROVED
    REJECTED
}

enum SignatureStatusQuery {
    SUBMITTED                       # ok
    VERIFIED                        # ok
    VERIFICATION_PENDING            # ok

    APPROVED
    APPROVED_AND_VERIFIED           # ok
    APPROVED_VERIFICATION_PENDING   # ok

    REJECTED
    REJECTED_AND_VERIFIED           # ok
    REJECTED_VERIFICATION_PENDING   # ok

    ANY                             # ok
}

input SignaturesByPetitionInput {
    petition: ID!

    limit: Int
    status: SignatureStatusQuery
    cursor: ID
}

input SignaturesOfPetitionInput {
    limit: Int
    status: SignatureStatusQuery
    cursor: ID
}

type SignatureConnection @aws_cognito_user_pools {
    items: [Signature!]!
    token: ID
}

input TargetSignatureInput {
    signatureId: ID!
}

type Signature @aws_cognito_user_pools {
    signer: ID!

    name: String!
    status: SignatureStatus!

    # might want to use AddressData here, but it seems like this is a
    # simple text field on the designs
    address: String!

    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!

    verifiedAt: AWSDateTime
    isVerified: Boolean!
    method: VerificationMethod!
}

enum VerificationMethod {
    STATE_ID
    EMAIL
    TEXT
    CALL
    POSTAL
}

input VoterRecordMatchInput {
    fullName: String!
    address: String!
    city: String!
    state: String!
    zipCode: String!
}

type VoterRecordMatch @aws_iam {
    fullName: String!
    address: String!
    city: String!
    state: String!
    zipCode: String!

    token: String
    methods: [String!]!
}

input SignatureVerificationInput {
    fullName: String!
    address: String!
    city: String!
    state: String!
    zipCode: String!

    # received from voter record match
    token: String!

    # selected method and optional args
    method: VerificationMethod!
    methodPayload: [String]!

    # petition data, either of them must be provided
    # title may refer to full candidate name when
    # dealing with candidate petitions
    id: ID
    title: String
}

type SignatureVerification @aws_iam {
    # by design, signature validation
    # responses echo the request as part of
    # them

    fullName: String!
    address: String!
    city: String!
    state: String!
    zipCode: String!

    token: String!

    method: VerificationMethod!
    methodPayload: [String]!

    id: ID
    title: String

    # actual verification result
    error: String
    confirmationRequired: Boolean!
}

type CodeSubmissionResult @aws_iam {
    error: Boolean!
    message: String!
}
